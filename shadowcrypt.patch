--- ./shadow-4.1.5.1/lib/encrypt.c	2010-08-22 17:05:02.000000000 +0400
+++ ./shadow-4.1.5.1/lib/encryptpathed.c	2014-03-13 21:07:04.171890998 +0400
@@ -46,16 +46,43 @@
 	char *cp;
 
 	cp = crypt (clear, salt);
-	if (!cp) {
-		/*
-		 * Single Unix Spec: crypt() may return a null pointer,
-		 * and set errno to indicate an error.  The caller doesn't
-		 * expect us to return NULL, so...
-		 */
-		perror ("crypt");
-		exit (EXIT_FAILURE);
-	}
+ 	if (!cp)
+    {
+ 		/*
+		 * In glibc-2.17 and newer, crypt() will return NULL if
+		 * it was called using an invalid salt format.  Previous
+		 * versions of glibc would go ahead and compute a DES hash
+		 * using the invalid salt.  The salt value in this case was
+		 * always '!'.  We might arrive at this place if either the
+		 * user does not exist, or if the hash in /etc/shadow doesn't
+		 * have the proper magic for one of the supported hash
+		 * formats (for example, if the account was locked using
+		 * "passwd -l".  To handle this situation, we will recompute
+		 * the hash using a hardcoded salt as was previously done
+		 * by glibc.  The hash returned by the old glibc function
+		 * always began with "!!", which would ensure that it could
+		 * never match an otherwise valid hash in /etc/shadow that
+		 * was disabled with a "!" at the beginning (since the second
+		 * character would never be "!" as well), so we will also
+		 * prepend the resulting hash with "!!".  Finally, in case
+		 * crypt() failed for some other reason we will check to see
+		 * if we still get NULL from crypt even with the valid salt
+		 * and will fail if that's the case.
+ 		 */
 
+		/* Recalculate hash using a hardcoded, valid SHA512 salt: */
+		cp = crypt (clear, "$6$8IIcy/1EPOk/");
+
+		if (!cp) 
+        {
+			perror ("crypt");
+			exit (EXIT_FAILURE);
+		} else
+         {
+			sprintf (cipher, "!!%s", cp);
+   			return cipher;
+	     }
+    }
 	/* The GNU crypt does not return NULL if the algorithm is not
 	 * supported, and return a DES encrypted password. */
 	if ((NULL != salt) && (salt[0] == '$') && (strlen (cp) <= 13))
